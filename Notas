#Instalar openFoam
https://openfoam.org/download/4-1-source/

#Ir al directorio de openFOAM
#https://openfoam.org/download/4-1-source/

#mods de bins y libs
https://cfd.direct/openfoam/user-guide/compiling-applications/

cd $FOAM_RUN
cp -r $FOAM_INST_DIR/OpenFOAM-4.0/applications/utilities/mesh/conversion/foamToStarMesh .
cd foamToStarMesh
wmake

cp -r $FOAM_INST_DIR/OpenFOAM-4.0/applications/utilities/mesh/conversion/foamToStarMesh

#Clases relacionadas con el mallado:    https://cpp.openfoam.org/v4/
cellShape #"Forma" de las celdas
primitiveMesh # Cell-face mesh analysis engine3
polyMesh #Mesh consisting of general polyhedral
fvMesh #

Archivos incluídos

  doxigen
    https://cpp.openfoam.org/v4/
    
  setRootCase.H
    $FOAM_INST_DIR/OpenFOAM-4.0/src/OpenFOAM/include/setRootCase.H
    https://github.com/OpenFOAM/OpenFOAM-4.x/blob/master/src/OpenFOAM/include/setRootCase.H

  createTime.H
    $FOAM_INST_DIR/OpenFOAM-4.0/src/OpenFOAM/include/createTime.H
    https://github.com/OpenFOAM/OpenFOAM-4.x/blob/master/src/OpenFOAM/include/createTime.H

  createPolyMesh.H:
    $FOAM_INST_DIR/OpenFOAM-4.0/src/OpenFOAM/include/createPolyMesh.H
    https://github.com/OpenFOAM/OpenFOAM-4.x/blob/master/src/OpenFOAM/include/createPolyMesh.H

  getTimeIndex.H ------> incluído en la msca carpeta que el conversor

  STARCDMeshWriter.C
    $FOAM_INST_DIR/OpenFOAM-4.0/src/conversion/meshWriter/starcd/STARCDMeshWriter.C
    https://github.com/OpenFOAM/OpenFOAM-4.x/blob/version-4.0/src/conversion/meshWriter/starcd/STARCDMeshWriter.C    
    
   $FOAM_INST_DIR/OpenFOAM-4.0/src/conversion/meshWriter/

  createPolyMesh.H
    $FOAM_INST_DIR/OpenFOAM-4.0/src/OpenFOAM/include/createPolyMesh.H
    https://github.com/OpenFOAM/OpenFOAM-4.x/blob/master/src/OpenFOAM/include/createPolyMesh.H
    
Cosas que quiero modificar e incluir

  foamToStarMesh
    $FOAM_INST_DIR/OpenFOAM-4.0/applications/utilities/mesh/conversion/foamToStarMesh
  STARCDMeshWriter.C
    $FOAM_INST_DIR/OpenFOAM-4.0/src/conversion/meshWriter/starcd

Archivos 

============
Objetivos: Cargar librerías de OpenFoam en el programa:
*-Copiar los códigos de ejemplo de starmesh
*-Compilarlos
*-Correrlos con el ejemplo del cubo
*-Modificar los nombres delos archivos para sentar las bases de todo
*-Compilar los nuevos archivos
*-Añadirlos a mercurial
-Comentar lo que he entendido del código
-Modificarlo para kiva4
*  -Escribir puntos
*  -Escribir celdas

 //- Return cell zone mesh, getCellTable() tiene cosas de cellzones. Se eliminó por si acaso me estaba afectando el código
 
    https://cfd.direct/openfoam/user-guide/mesh-description/    
  -Escribir tipos de cara de cada celda
    -Hacer refactoring para el cambio de caras de OFoam a Kiva4
    -Escribir en el formato de kiva4grid
  -Escribir tipos de volúmenes de cada celda
    -mirar las regiones de ofoam (ANOTAR ESO CUALDO LO VUELVA A VER)
*    -Volver al archivo original
*    -compilar y ejecutar el bicho original
*    -renombar el archivo de condiciones de frontera
*    -usarlo para ver qué pasó en la conversión normal
*  -Hacer prueba intermedia que compruebe puntos, celdas y caras
*  -Hacer mallado de un cilindro en Salome
*    -Discretizrlo y simularlo
*  -Mallado de 1 cubo de 1 sólo elemento
*   -En salomé
*   -En kiva4grid
*  -Escribir el kiva4grid definitivo
*   -Probar con eso:
*     -Están bien mapeados los Vértices ->NO
*     -Están bien mapeados las caras ->NO
*     -Están bien mapeados las cFrontera ->NPI
*  -Analizar las otras funciones donde se hace uso del mapeo
  -Echarle un ojo a lo de malla estructurada
*  -funciones map en ensightMesh.C -> Para las mallas
  -función inplaceRenumber en ensightMesh.C?
  
*  -Hacer programa que conforme la hipótesis del orden de las celdas hexaedricas
*    -eliminar la dependencia de writemesh.h --> igual esta librería puede ser útil después.
*    -Hacer que use fvMesh en todo lado
*    -Consultar cada una de caras mapeadas de las celdas
*    -Sacar el centroide de cada una de las caras mapeadas
*    -Restar al centroide de la celda al centroide de la cara
*    -Clasificar los valores positivos en cada eje como máximos y negativos como mínimos respecto a cada eje
*    -Basado en lo anterior, identificar caras posiciones de vértices
*      -Encontrar los vértices comunes a una cara
*      -Implementar == para los grupos de vértices hallados
*       -MODIFICAR ESO PARA QUE SÓLO USE LOS PTS DE CADA CELDA
*       -Modificar para que encuentre una colección de labels de puntos, en vez de ptos
*       -Imprimir los labels de los ptos en el formato de KIVA
*          -Añadir formato de ptos de KIVA
*          -Añadir formato de caras de KIVA
*    -Mapear caras y vértices a posiciones de KIVA4
*    -imprimir lo que se mapeó
*    -Hacer que el program escriba las condiciones de frontera
*      -Separar la función que crea posFaces: la que dice la posición de las caras
*      -Hacer que el programa de celdas funcione con posFaces separado
*       -incorporar diccionario de CFrontera de KIVA4
*       -Hacer que use el dicionario para poner las condiciones que son y ya
       -Hacer pruebas
         -Remallar el cubo de 1 vols
*         -Remallar el cubo de 8 vols
         -Remallar el cubo de 8k vols
       -Ordenar y guardar carpetas de pruebas
         -cubo de 1  vols, 4 cond. frontera : Para ver problemas de asignación de caras y puntos
         -cubo de 8  vols, 4 cond. frontera : Para ver problemas de asignación de caras y puntos
         -cubo de 8k vols, 4 cond. frontera : Para ver problemas de asignación de caras y puntos
         -cubo de 1  vols, paredes y E/S presión : Para probar con corridas
         -cubo de 8  vols, paredes y E/S presión : Para probar con corridas
         -cubo de 8k vols, paredes y E/S presión : Para probar con corridas
      -Limpiar la info que escribe de debugueo
*      -Usar posFaces para sacar los tipos de las caras
*      -Probar de nuevo_
        -cubo de 1 elemento
*        -cubo de 4 elementos
*    -Ver si se cumple el patrón para mallas diferentes
*      -Malla de 1 elementos
*         -para las caras
*         -para los puntos
*          -para las fronteras
*      -Malla de 4 elementos
*         -para las caras
*         -para los puntos
*          -para las fronteras
     -Cámara de Mauricio Rueda (hacer malla spray)
     
*     -Tobera (con ideas de mallado alternativo)
     -Otras mallas estáticas
     -Implementar nuevo algoritmo para escoger caras
*       -Mirar el capítulo de mallado de Chung
*       -Buscar función de vectores de las mallas
*        -Hacerles ingeniería inversa
*        -¿Usan vectores unitarios?: NO
*        -Si celli!=faceowner(face) Then invierta el sentido del Vector de la cara
*        -Para calcular vUnitarios:   vector n = mesh_.faceAreas()[facei]; n /= mag(n) + VSMALL;
*    -Encontrar la forma de imprimir las celdas y nodos de la malla de OpenFOAM
*      -Instalar paraFoam
*        -Solucionar error de instalación de paraFoam: había que isntalar el programa time
*      -Buscar/diseñar procedimeinto de visualización -> Procedimiento encotnrado en internet
*        -Anotar dicho procedimiento
*       -Buscar forma de imprimir las caras -> No se pudo, tocó con los vértices
*    -Hacer que se presente la información de forma más clara
*      -La lista de caras final debe tener -1 para los números que no fueron modificados
*    -Probar la rutina oppositeface
*      -¿Funciona como creo que funciona en las celdas hexagonales?  ----->Sí
*        -Dada cualquier cara ¿Imprime la que está al frente?        ----->Sí
    -Pensar un algoritmo que haga uso de caras comunes
      -Clasificar caras, no celdas
        -Usar criterio de vectores de caras: paralelos a x, y o z -> No elimina el problema de ambigüedad intra-celda
          -mirar qué pasa-> No elimina el problema de ambigüedad intra-celda
*      -¿Qué pasa si se usa un vector que va de una cara a la cara opuesta? --->Si es que oppositefaces funciona
        -//Se slimina de facto el problema de ambigüedad entre celdas opuestas
*        -Tomar 1 de las caras y su cara opuesta
*        -Restar sus posiciones de acuerdo a sus labels
*        -Comparar con valores anteriores de X,Y y Z: Guardar los labels del par de caras si son mayores en alguno
*        -Asignar a la cara en la cola del vector el bottom o lo que corresponda y a la otra la contrapuesta
*        -Comprobar que no haya asignaciones dobles para ningún eje
*          -¿Cómo hacerlo?
*        -Comprobar coherencia en la asignación de puntos
*        -Comprobar choerencia en la asignación de cFrontera
*        -Comprobar que la selección de caras sea coherente --> ¿por qué hay 2 caras sólidas/elemento si max es 1?
*    -Idear forma de detectar celdas ignoradas
*      -Imprimir el número de celda según oFoam
*      -Imprimir labels de nodos de la celda según oFoam
*      -Imprimir nodos de la celda según oFoam
*    -Inventar e implementar algoritmo para ranquear
*      -inventarse el algoritmo
*      -evitar caras repetidas
*      -cree lista de labels caras opuestas
*      -cree lista de labels vectores
*      -encuentre vectores con sus caras y guardelos
*      -Coja los 6 vectores
*      -Ranquee los vectores de mayor a menor componente en x,y,z
*      -Guarde c/u de los valores máximos para los tres ejes
*      -Mire los valores mayores para ver si algún par de caras está repetido
*         -Si no están repetidos, siga adelante
*            -Si no lo es, compare el segundo con los demás (excepto el primero)
*           -Escoger el eje con menor componente
*           -Hallar otro par de caras diferente para ese eje
*           -Buscar otro vector para el segundo más grande o el 3ro según sea el caso
*           -Volver a comprobar que no hayan ejes repetidos
*   -Hacer la malla de la Tobera final 
*     -Averiguar mallado que funciona
*     -Averiguar procedimiento de mallado
*       -Hacer una malla tal como aparece en "Malla Funcional" en el archivo minitobera.hdf
*       -unir todos los nodos en el botón "Merge nodes"
*       -Unir las caras que qeudaron sueltas con el botón "Merge elements"
    -Hacer malla de Andrés Rueda
*      -Pedir malla a Mantilla a las 11:00 am
*       -Hacer modelo CAD
         -parametrizarlos lesson 22
*         -Hacer un wire 2d Y luego una revolución para crear el sólido
       -Hexa con submesh lesson 35
*    -Hacer malla de cilindro-Pistón
*    -Hacer malla de cilindro-Pistón-Bowl
    -Mirar cómo demonios cargar un debugger con GUI
*    -Hacer Informe para pedir pago
      -Pedir cita con Mantilla

    -Añadir la detección de grupos de volúmenes
      -Averiguar función que detecta los tipo de volúmenes en openFoam
      -Pasar la lista de volúmenes de control a OpenFOam
      -Escribir la función que detecta y escribe eso

    
    0.0 0.0
    0.0 0.635
    5.6 0.635
    67.3° 2.54 Y -> (6.396879, 2.54), fillet r=0.2
    13.3971 2.54
    16.997101 1.5
    16.997101 0.0
    0.0 0.0
    
    
----------------------------------------------     




    -MEDIDA DESESPERADA: Separar el código de clasifiación para evaluarlo con datos de celdas problemáticas
      -Imprimir todos los datos de la celda problemática
      -Hacer librería aparte con el código de clasifiación de caras para hacer unit testing
  




./Allwclean
./Allwmake
Changeset: 10 (69a44e519812) Funciona para el elemento #5
 -la asignación correcta de ptos y de caras da bien para este elemento: 1 7 11 15 2 8 12 16 
 -También coge correctamente los top y bottom de todas las celdas
-Use los mayores para asignar 

41329207


============

#USO
  ./foamToKIVA4Mesh -scale 1

#COMPILAR
clear && clear && wmake
#VER NODOS Y ELEMENTOS DE LA MALLA DE OPENFOAM
#  cd [directorio de la malla]
paraFOam
#  Seguir instrucciones de estas 2 páginas (hay una copia de esto en un mail con título foamToKIVA4Mesh):
https://www.cfd-online.com/Forums/paraview/103358-how-display-cell-number-paraview.html
http://public.kitware.com/pipermail/paraview/2008-April/007826.html

#Cargar el entorno de OpenFoam
source /home/carlos/OpenFOAM/OpenFOAM-4.0/etc/bashrc
